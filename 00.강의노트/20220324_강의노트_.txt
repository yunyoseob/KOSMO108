2022-03-24
-------------------------

form 태그 
웹문서(html 태그로 만든 문서)에서 웹 서버로
데이터를 요청할 수 있는 유일한 태그 

웹 문서에서 웹 서버로 데이터를 요청할 수 있는 방법 : request
1. form  태그 
2. XMLHttpRequest 객체
3. Ajax (XMLHttpRequest 객체를 가지고 구글 엔진니어가 만든 형식)

form 속성 attribute
id		form 태그의 유일한 이름
name	form 태그의 이름 
method	요청할 때 데이터 보내는 방식을 정하기 
			get, post, put, delete, update ..
		get
			1. 사이즈 제한 있다. 
				HTTP1.0 : 500 바이트 정도 , HTTP1.1 : 제한이 없음
				get	256 ~ 4096byte 서버로 전송 가능
			2. 요청 데이터를 header 에 전송
		post
			1. 사이즈 제한 없음 
			2. 요청 데이터를 body 에 전송
action	 웹 서버의 파일위치 및 파일의 이름 또는 별칭(앨리어스)


HTTP 프로토쿨
--------------
request 요청
	헤더
	바디
response 응답
	헤더
		서버에서 잘 동작을 해서 결과를 잘 만들어서 클라이언트에게 전달할 때 : 200
		요청한 정보에서 요청한 파일을 찾지 못하면 : 404
		요청한 정보를 파일을 잘 찾아서 일하다가 서버에서 에러가 나면 : 500
	바디
		헤더에서 200번 일 때만 
		바디 태그에 응답 정보를 전송한다.

서버에 요청 정보를 보낼 때
=======================================================
form 태그에 있는 input 태그의 type 속성 정해서(선택해서)
input 태그의 name 속성에 서버에 보내고자하는 정보를 담어서 보낸다.
서버에서는 jsp 인 경우
	request.getParameter("input 태그의 name 속성의 이름");
리퀘스트의 객체에 있는 getParameter 함수의 인자로 
input 태그의 name 속성의 이름 으로 받아온다.
=======================================================


자바스크립트 
==============================
자바 스크립트 세계에 입문한 것을 축하합니다. 
완전히 개고생이당 ....
개고생을 하지 않으려면 눈치(내가 지금 사용하는 스크립트가 몬지를 알아야 한다.)가 있어야 한다. 

브라우저					렌더링 엔진							자바스크립트 엔진
---------------------------------------------------------------------
Chrome					블링크(Blink) <- 웹킷(Webkit)		V8
Firefox					게코(Gecko)						스파이더몽키(SpiderMonkey)
Internet Explorer		트라이덴트(Trident)					차크라(Chakra)
Safari					웹킷(Webkit)						자바스크립트코어(JavascriptCore)
Opera					블링크(Blink)						V8


자바 스크립트는 
웹 브라우저에서 자바스크립트 소스 읽고 처리하는 해석기 javascript intereter 로 구동한다.
자바 스크립트는 웹 문서에서 <scrpit>  태그를 이용해서 작성한다.

=============================================
https://www.ecma-international.org/

ECMA 스크립트 ECMAScript 또는 ES
Ecma International이 ECMA-262 기술 규칙에 따라
정의하고 있는 표준화된 스크립트 프로그래밍 언어.

넷스케이프가 표준화를 위해 자바스크립트 기술 규격을
Ecma 인터내셔널에 제출하고, 이 규격에 대한 작업은
ECMA-262의 이름으로 1996년 11월부터 시작
ECMA-262의 초판은 1997년 6월에 채택

ECMA-262 10개 판이 출판, 10판 표준은 2019년 6월 

3판		1999년6월		
5.1판	2011년6월
6판		2015년6월		ECMAScript 2015, ES2015, ES6
~~
10판		2019년6월		ECMAScript 2019, ES2019, ES10
매년 6월에 출판 2022년 버전도 나와있음
=============================================


자바스크립트 객체
---------------
자바스크립트에서의 객체는
프로그램에서 인식할 수 있는 모든 대상을 가리킨다.
자바스크립트는 웹 사이트나 웹 애플리케이션을 개발하는 언어이므로
웹과 관련된 대상을 모두 객체로 인식한다.

문서 객체 모델 : Document Object Model : DOM
	웹 문서 자체 document, 이미지 img, 링크 link 등 etc.

브라우저 관련 객체 : Browser Model Object : BOM 
	웹 브라우저에서 사용하는 정보
	screen, navigater, history, location, document 등 

내장 객체 : 
	웹 프로그래밍에서 자주 사용하는 요소들
	Object, String, Number, Boolean, Math, Array, Date
	Function, RegExp, Error, Symbol, XMLHttpRequest 등

기타 객체
	JSON 등

사용자 정의 
	사용자 정의로 만드는 객체

자바스크립트 내장함수
--------------------
encodeURI()		문자를 유니 코드값으로 인코딩
				영문, 숫자, 일부 기호(; , / ? : @ & = + $ 등)는 제외
decodeURI()		유니 코드값을 디코딩 다시 문자로

encodeURIComponent()	문자를 유니 코드값으로 인코딩
						영문, 숫자, 일부 기호(- _ . ! ~ * ' () 둥)는 제외
decodeURIComponent()	유니 코드값을 디코딩해 다시 문자로

escape()		ASCII 이외 문자 인코딩 1바이트 : %XX, 2바이트 : %uXXXX
unescape()		escape() 인코딩한 문자를 디코딩

parseInt()		문자열 정수로
parseFloat()	문자열 실수로

String()		문자형 데이터 반환
Number()		숫자형 데이터 반환
Boolean()		true, false 반환
				Boolean(null) -> false

isNaN()			is Not a Number의 약자
				숫자가 아닌 문자가 포함되어 있으면 true 반환
eval()			문자형 데이터를 자바스크립트 코드로 변환 <-- 보안 취약성
		

객체 인스턴스 만들기
-----------------
자바스크립트에서 객체는 참조 형태로 사용한다.
객체 자체가 아니라 인스턴스 instance의 형태로 만들어서 사용한다.
인스턴스 할 때는 new 예약어를 사용한다.
new 객체명
var date = new Date();

객체 = 프로퍼티(속성) property + 메서드 method


브라우저 관련 객체
------------------
브라우저 객체 모델 Browser Model Object BOM

window 브라우저 창이 열릴 때마다 하나씩 만들어진다. 최상위 요소
	screen		현재 사용하는 화면 정보
	navigator	현재 사용하는 브라우저의 정보
	history		현재 창에서 사용자의 방문 기록을 저장
	location	현재 페이지의 URL 정보
	document	웹 문서마다 하나씩 있으며, body 태그를 만나면 만들어진다.

window 객체
-----------------
open("URL", "새창이름", "새창옵션")
alter(data)

prompt("질문", "답변")

confirm("질문내용")

moveTo(x, y)
resizeTo(width, height)

setInterval(function(){ 자바스크립트 코드 }, 일정시간 간격)

setTimeout(function(){ 자바스크립트 코드 }, 일정시간 간격)

navigator 객체
-----------------
navigator.userAgent	브라우저와 운영체제 정보


history 객체
-----------------
history.length		방문 기록에 저장된 목록의 개수
history.back(n)		이전 방문 사이트로 이동
history.forward()	다음 방문 사이트로 이동
history.go(n)		n 번째로 이동, +, -


location 객체
-----------------
location.href		URL을 반환한다
location.hash		URL	해시값(#에 명시된 값)
location.hostname	호스트 이름
location.host		호스트 이름, 포트번호
location.protocol	프로토콜
location.search		쿼리스트링
loactin.reload()	브라우저 F5 새로고침 기능

screen 객체
-----------------
screen.width		화면 너비
screen.height		화면 높이
screen.availWidth	작업표시줄 제외한 화면 너비
screen.availHeight	작업표시줄 제외한 화면 높이
screen.colorDepth	사용자 모니터 컬러 bit


문서 객체 모델 DOM 
---------------
Documnet Object Model 정의
	자바스크립트를 이용해서 웹 문서에 접근하고 제어할 수 있도록
	객체를 사용해 웹 문서를 체계적으로 정리하는 방법

DOM은 웹 문서를 하나의 객체로 정의한다. 
웹 문서 전체는 document 객체이고 
텍스트, 이미지, 표 등 모든 요소도 각각 객체이다.

DOM 트리 
DOM은 웹 문서의 요소를 부모요소와 자식요소로 구분하며
요소를 부모와 자식구조로 표시하면 마치 나무 형태가 되므로 DOM 트리라고 한다.
DOM 트리에서 각 항목을 노드 node 라고 한다.
루트 노드 root node
부모 노드 parent node 
자식 노드	chiled node
형제 노드	sibling node 

DOM 구성 규칙
1. 모든 HTML 태그는 요소(element) 노드이다.
2. HTML 태그에서 사용하는 텍스트 내용은 자식 노드인 텍스트 노드 text node 이다.
3. HTML 태그에 있는 속성은 자식 노드의 속성 노드 attribute node 이다.
4. 주석은 주석 노드 comment node 이다. 


DOM 요소에 접근하기
--------------------

HTML 요소(HTMLMCollection)를 가져오는 함수들 

id 선택자
	document.getElementById("id명")

class 선택자
	document.getElementsByClassName("클래스명")

tag 이름 선택자
	document.getElementsByTagName("태그명")



웹 요소의 내용을 수정하는 innerText, innerHTML 프로퍼티
----------------------------------------------
자바스크립트에서 웹 요소의 내용을 수정
innerText 프로퍼티는 텍스트 내용을 표시 
innerHTML 프로퍼티는 HTML 태그까지 반영하여 표시 
	
요소명.innerText = 내용;
요소명.innerHTML = 내용;

속성을 가져오거나 수정하는 getAttribute(), setAttribute()
---------------------------------------------------
getAttribute("속성명");
setAttribute("속성명", "값")
	

addEventListener() 함수 이벤트 처리
---------------------------------------
요소.addEventListener(이벤트, 함수, 캡쳐여부);
이벤트 : 이벤트 유형을 지엉(단, on을 붙이지 않는다.)
함수 : 이벤트가 발생하면 실행할 명령이나 함수 지정
캡쳐여부 : true (캡처링 : 부모노드에서 자식노드로 전달) default
		false(버블링 : 자식노드 에서 부모노드로 전달)

CSS 속성 접근하기
-----------------
document.요소명.style.속성명


자바 자료형 
------------------
1. 기초 자료형 : 원시 자료형 : 원시 타입 : primitive type
2. 참조 자료형 : 객체 자료형 : 객체 타입 : reference type


자바스크립트 자료형 : var , let, const
---------------
원시 타입
-------
숫자			정수, 실수 : 따옴표 없이 숫자로만 표시 
			var b = 2000;
문자			작은따옴표 '2022' 큰따옴표 "Hello!" 
			a b 따옴표(쿼테이션)을 사용 않하면 null 을 구분자로 인식
			숫자를 따옴표로 묶으면 문자로 인식 : 문자 숫자
			var g = "Hello!";
			var n = '2022';			
논리			true, false
			var isEmpty = true;
undefined	자료형이 지정되지 않았을 때의 상태
			변수를 선언하고 값을 할당하지 않은 변수
			없는 객체의 프로퍼티를 읽으려고 시도했을 때의 값
			없는 배열의 요소를 읽으려고 시도했을 때의 값
			아무것도 반환하지 않는 함수가 반환하는 값
			함수를 호출했을 때 전달받지 못한 인수의 값
null		값이 유효하지 않은 상태

객체 타입
-------
객체
	객체 리터럴로 객체 생성하기 
	var card = {suit:"하트", rank:"A"};
	var card1 = {"suit":"하트", "rank":"A"};
	객체 리터럴, 리터럴 객체 : {....}
	변수 card
	프로퍼티 이름 : suit, "suit"
	프로퍼티 값 : "하트", "A"
배열
	배열 리터럴로 생성
	var evens = [2, 4, 6, 8];
	var evens = new Array(2, 4, 6, 8);
	var empty = new Array();
함수
	함수 선언문으로 정의하는 법
		function square(x) { return x*x; }
	함수 리터럴로 정의하는 법
		var square = function(x) { return x*x; }
	Function 생성자로 정의하는 방법
		var square = new Function("x", "return x*x");
	화살표 함수(애로우 함수) 표현식으로 정의하는 방법
		var square = x => x*x;


변수 
----------
var 예약어 사용 : "바" 라고 발음 : Variable 약자
=====================================
자바스크립트에서는 테이터 타입을 사용하지 않는다.
=====================================
var 데이터 타입에 변수명을 선언하고 데이터 타입을 대입하면
자바스크립트 엔진이 알아서 데이터 타입을 맞추어서 생성해 준다. 

var s = "abc"; 아 문자열 이구나 
var i = 11; 아 숫자, 정수 구나 
var f = {a:"a", b:"b"}; 리터럴 객체구나 
var a = new Array[1, 2, 3]; 배열 객체구나 
var fu = function(abc){ return abc;}: 함수 객체 구나 
=============================================
데이터 타입을 알고 싶으면 typeof() 함수를 사용하면 된다.
=============================================

지역변수 local variable
	함수 안에서 선언하고 
	함수 안에서만 사용
전역변수 global variable
	스크립트 소스 코드 전체에서 사용
	함수 밖에서 선언
	--------------------------
	함수 안에서 var 예약어 빼고 선언
	--------------------------

ES6 변수 추가
let		함수 블럭에서만 사용 가능 
const	상수 역활

=====================================
변수 사용은
1. 전역변수는 최소한 사용
2. var 변수는 함수의 시작 부분에서 선언
3. for문 카운트 변수로 var 사용하지 말기
	let 으로 사용하기 
=====================================

함수 
------------
함수를 선언할 때는 
function 예약어와 중괄호 {} 을 사용한다.

1. 함수 선언문
----------
function 함수명() { 명령문; }
function 함수명(변수) { 명령문; }

함수 호출 또는 함수 실행
함수명() 또는 함수명(변수)


2. 익명 함수 선언
--------------
함수 이름이 없는 함수
function(){}
var 변수 = function(){} <-- 함수를 리터럴로 정의

익명 함수 실행
var sum = function (a, b){ return a+b; }
document.write(sum(10, 20));


3. 즉시 실행 함수
---------------
한 번만 실행하는 함수 
(function() { 명령 }());
(function(매개변수) { 명령 }(인수));


4. 화살표 함수 : ES6
-----------------
(매개변수) => { 함수 내용 }

매개변수가 없는 경우
const hi = () => { return "안녕하세요" };
매개변수가 1개인 함수
let hi = user => { document.writer(user + "안녕하세요");}
매개변수가 2개 이상인 경우
let sum = (a,b) => a+b;


이벤트 와 이벤트 처리기
------------------------

마우스 이벤트
click		사용자가 HTML 요소르 클릭할 때 이벤트가 발생
mousedown	사용자가 요소 위에서 마우스 버튼을 눌렀을 때 이벤트가 발생
.....

키보드 이벤트
keydown		사용자가 키를 누르는 동안 이벤트가 발생
keypress	사용자가 키를 눌렀을 때 이벤트가 발생
keyup		사용자가 키에서 손을 뗄 때 이벤트가 발생

문서로딩 이벤트
load	문서 로딩이 끝나면 이벤트가 발생
resize	문서 화면 크기가 바뀌었을 때 이벤트가 발생
scroll	문서 화면이 스크롤되었을 때 이벤트가 발생

폼 이벤트
blur	폼 요소에 포커스를 잃었을 때 이벤트가 발생
change	<input>, <select>, <textarea> 태그에서
		목록이나 체크 상태들이 변경되면 이벤트가 발생
focus	폼 요소에 포커스가 놓였을 때 이벤트가 발생
		<label>, <select>, <textarea>, <button> 태그에서 사용
reset	폼이 리셋되었을 때 이벤트가 발생
submit	submit 버튼을 클릭했을 때 이벤트가 발생


이벤트 처리기 이벤트 핸들러 
===================================================
HTML 태그 안에서 'on' 다음에 '이벤트명'을 붙여서 속성이름을 만들고
===================================================
실행할 이벤트 처리기의 함수명을 작성한다.
<태그 on이벤트명 = "함수명">

이벤트 처리방법
HTML 요소의 이벤트 처리기 속성에 설정하는 방법
	<input type="button" onclick="changeColor();">
DOM 요소 객체의 이벤트 처리기 프로퍼티에 설정하는 방법
	vat btn = document.getElementById("button");
	btn.onclick = changeColor();
addEventListener 메서드를 사용하는 방법
	vat btn = document.getElementById("button");
	btn.addEventListener("click", changeColor, false);


