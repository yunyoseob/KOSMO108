2022-04-14
---------------------------------

컨텍스트 란 ????
=====================================================================================
servler.xml 
--------------------------------
<Host appBase="webapps" autoDeploy="true" name="localhost" unpackWARs="true">

	<!-- SingleSignOn valve, share authentication between web applications
		 Documentation at: /docs/config/valve.html -->
	<!--
	<Valve className="org.apache.catalina.authenticator.SingleSignOn" />
	-->

	<!-- Access log processes all example.
		 Documentation at: /docs/config/valve.html
		 Note: The pattern used is equivalent to using pattern="common" -->
	<Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs" pattern="%h %l %u %t &quot;%r&quot; %s %b" prefix="localhost_access_log" suffix=".txt"/>

	<Context docBase="kosMember" path="/kosMember" reloadable="true" source="org.eclipse.jst.jee.server:kosMember"/>
	<Context docBase="aContext" path="/aContext" reloadable="true" source="org.eclipse.jst.jee.server:aContext"/>
	<Context docBase="bContext" path="/bContext" reloadable="true" source="org.eclipse.jst.jee.server:bContext"/>
</Host>

localhost 호스트 서버에 

컨텍스트가 3개 있다.
	kosMember Context
	aContext Context
	bContext Context

웹 프로젝트가 3개
	kosMember 웹 프로젝트
	aContext 웹 프로젝트
	bContext 웹 프로젝트

Web Application 3개
	kosMember Web Application
	aContext Web Application
	bContext Web Application

도메인 3개

프로젝트 3개 
	kosMember 프로젝트
	aContext 프로젝트
	bContext 프로젝트
*.war 2개 있다. 
	kosMember.war
	aContext.war
	bContext.war


C:\00.KOSMO108\30.Web\eclipse_work_hbe_work\kosMember
C:\00.KOSMO108\30.Web\eclipse_work_hbe_work\aContext
C:\00.KOSMO108\30.Web\eclipse_work_hbe_work\bContext

C:\00.KOSMO108\30.Web\eclipse_work_hbe_work\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\kosMember
C:\00.KOSMO108\30.Web\eclipse_work_hbe_work\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\aContext
C:\00.KOSMO108\30.Web\eclipse_work_hbe_work\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\bContext
=====================================================================================

HTTP 프로토콜 요청/응답 프로토콜 구조 
--------------------------------

Request Line
HTTP Header : HEADER
Empty Line
Message Body : BODY

Message Body 들어가는 데이터 타입을 
HTTP Header Content-type 필드에 적어준다.

----------------------------------------------------------------
Content-type
--------------------
Content-Type 개체 헤더는 리소스의 media type을 나타내기 위해 사용됩니다.

문법
Content-Type: text/html; charset=utf-8
Content-Type: multipart/form-data; boundary=something

media-type
	리소스 혹은 데이터의 MIME type.
charset
	문자 인코딩 표준.
boundary
	멀티파트 개체에 대해 boundary 디렉티브는 필수인데, 
	이메일 게이트를 통해 매우 탄탄해졌다고 알려진 캐릭터셋의 1~70개의 문자들로 구성되며, 
	빈 공백으로 끝나지 않습니다. 
	이는 메시지의 멀티 파트 경계선을 캡슐화하기 위해 사용됩니다.
----------------------------------------------------------------

form 속성
--------------------
name : form의 이름, 서버로 보내질 때 이름의 값으로 데이터 전송한다.
action : form이 전송되는 서버 url 또는 html 링크.
method : 전송 방법 설정. GET default / POST
enctype : 폼 데이터(form data)가 서버로 제출될 때해당 데이터가 인코딩되는 방법을 명시한다.

POST
--------------
HTTP POST 메서드는 서버로 데이터를 전송합니다. 
요청 본문의 유형은 Content-Type 헤더로 나타냅니다.

POST 방식 사용하기 
------------------------
기존 리소스에 주석달기
게시판, 뉴스 그룹, 메일링 리스트나 이와 유사한 시스템에 글 올리기
회원가입 모달로 새로운 사용자 추가하기
양식 전송 결과 등 데이터 블록을 데이터 처리 프로세스에 보내기
이어붙이기 연산을 통한 데이터베이스 확장

enctype attribute 속성값
-------------------------------
application/x-www-form-urlencoded
	&으로 분리되고, "=" 기호로 값과 키를 연결하는 key-value tuple로 인코딩되는 값입니다. 
	영어 알파벳이 아닌 문자들은 percent encoded 으로 인코딩됩니다. 
	content type은 바이너리 데이터에 사용하기에는 적절치 않습니다. 
multipart/form-data
	파일이나 이미지를 서버로 전송할 때 주로 사용
text/plain
	공백 문자(space)는 “+” 기호로 변환,
	나머지 문자는 모두 인코딩되지 않음