2022-06-07
--------------------

Node.js 
----------------

https://nodejs.org/dist/

https://nodejs.org/dist/v14.16.0/ 
node-v14.16.0-x64.msi


C:\Users\kosmo>node -v
v14.16.0

C:\Users\kosmo>npm -v
6.14.11


npm : Node Package Manager
-------------------------------------
현재 디렉토리에 NPM 기반으로 프로젝트를 생성
패키지이름, 버전, 설명등 입력 package.json 생성
npm init 
npm init -y (--yes) : 디폴트 값으로 프로젝트 생성


패키지 설치 
node_modules 디렉토리 생성
package-lock.json 파일 생성

npm install 패키지이름 
npm install 패키지이름 -g (--global) : 전역 설치 
npm instal  패키지이름 --save(devDependencies 추가, npm5 기본옵션으로 추가)

npm install 패키지이름
-P (--save-prod) : package.json의 dependencies에 패키지를 등록합니다.(default)
-D (--save-dev)  package.json의 devDepndencies에 패키지를 등록합니다.
-O (--save-optional) : package.json의 optionalDependencies에 패키지를 등록합니다.
--no--save : dependencies에 패키지를 등록하지 않습니다.


버전은 세 자리로 구성
----------------------------
major 버전
	하위 버전이 호환이 안될 정도로 패키지의 내용 수정
	주 버전이 0 이면, 초기 개발 중
	1부터는 정식 버전이다.	
minor 버전 
	하위 버전이 호환이 되는 업데이트 
patch 버전
	새로운 기능이 추가되었다기 보다는
	기존 기능에 문제가 있어 수정한 것을 내놓았을 때


‘^’, ‘~’  
^(캐럿): minor 버전까지만 설치 또는 업데이트한다.
~(틸트): patch 버전까지만 설치 또는 업데이트한다.


C:\00.KOSMO108\40.node
C:\00.KOSMO108\40.node\node_test
C:\00.KOSMO108\40.node\node_test>node init -y

C:\00.KOSMO108\40.node\node_test\01_js


Template literals 
----------------------------
템플릿 리터럴은 내장된 표현식을 허용하는 문자열 리터럴입니다. 
여러 줄로 이뤄진 문자열과 문자 보간기능을 사용할 수 있습니다. 

백틱(``) (grave accent) 을 사용할 수 있습니다. 

플레이스 홀더를 이용하여 표현식을 넣을 수 있는데
이는 $와 중괄호( $ {expression} ) 로 표기할 수 있습니다. 


노드에서 모듈
-------------------
exports 전역 객체 
require() 함수 
module 객체 


하나의 함수 안에 모든 기능을 여러개의 함수(독립적인 기능)로 나눈 후 
각 함수를 별도의 파일로 분리 후 메인 파일에서 전체적인 실행 순서나 흐름만을 제어 
별도로 분리된 파일을 노드에서는 모듈이라고 부름

     ===================
노드는 CommonJs의 표준 스펙을 따라 모듈을 사용
     ===================
exports 전역 객체 사용
모듈을 만들 때는 module1.js 처럼 별도의 자바스크립트 파일을 만든 후 
그 코드에서 exports 객체를 사용
exports 객체의 속성으로 변수나 함수를 지정하면 
그 속성을 main.js와 같은 메인 자바스크립트 파일에서 불러와 사용

모듈을 불러올 때는 require() 메소드를 사용
모듈로 만들어 둔 파일의 이름을 require() 메소드의 파라미터로 전달한다.
require() 메소드를 호출하면 모듈 객체가 반환된다.
모듈에서 exports 객체에 설정한 속성들은 이 모듈 객체를 통해 접근 할 수 있다.

exports	: 여러 개의 변수나 함수를 각각의 속성으로 추가할 수 있다.
	exports.add = function(a,b){
		return a + b;
	}
	exports.multiply = function(a,b){
		return a * b;
	}

module.exports	: 하나의 변수나 함수 또는 객체를 직접 할당한다.
				  일반적으로는 객체를 그대로 할당
				  이렇게 할당한 객체 안에 넣어 둔 변수나 함수를 
				  메인파일에서도 사용할 수 있다.
	var calc = {};
	calc.add = function(a,b){
		return a + b;
	}
	clac.multiply = function(a,b){
		return a *  b;
	}
	module.exports = calc;

require() : 모듈을 불러올 때 사용하는 함수 